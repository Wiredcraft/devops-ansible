#!/bin/bash
########################
# Setup all the packages defined
# in a folder and add them to .. 
########################

PACKAGE_FOLDER="$1"
TARGET="$2"
CONFIG="$3"

DEFAULT_CONFIG=$(basename $0).conf

usage() {
    echo
    echo "Usage: $(basename $0) package_folder target [config_file]"
    echo
    echo "  - package_folder: PATH to the folder that holds all the"
    echo "                    packages to install (.tar.gz)"
    echo "  - target: either 'ansible' or 'api'"
    echo "     - ansible: will install the package for ansible to use"
    echo "     - api:     will install the package meta data for api to use"
    echo "  - config_file (optional): path of the config file to use"
    echo "                    default - $(basename $0).conf"
    echo "                    It defines the various destination path"
    echo "                    see $(basename $0).conf.sample"
}

setup_ansible() {
    echo "Setting up packages for ansible"
    # Check destination folder
    if [ ! -d "$DEVOPS_ANSIBLE_ROOT" ]; then
        echo "Creating $DEVOPS_ANSIBLE_ROOT"
        echo -n "Proceed? [y/N] "
        read proceed 
        if [ "$proceed" == 'y' -o "$proceed" == 'Y' ]; then
            mkdir -p "$DEVOPS_ANSIBLE_ROOT"
            if [ $? -ne 0 ]; then
                echo "Error while creating $DEVOPS_ANSIBLE_ROOT. Aborting".
                exit 1
            fi
        else
            echo "Aborting."
            exit
        fi
    fi

    for package in $(ls $PACKAGE_FOLDER/*.tar.gz); do
        echo "Starting setup of $package"
        name=$(echo $(basename $package) | cut -f1 -d'_')
        version=$(echo ${package/.tar.gz/} | cut -f2 -d'_')
        # Checking if the package is already present
        if [ -d "$DEVOPS_ANSIBLE_ROOT/services/$name" -a -d "$DEVOPS_ANSIBLE_ROOT/services/$name/$version" ]; then
            echo "Package $name ($version) is already present."
            echo -n "Overwrite? [y/N] "
            read overwrite
            if [ "$overwrite" == 'y' -o "$overwrite" == 'Y' ]; then
                # Proceed with overwrite
                :
            else
                echo "Skipping..."
                continue
            fi
        fi
        # Proceed with setup - create folder and do cleanup
        if [ "$name" == 'common' ]; then
            PACKAGE_ROOT="$DEVOPS_ANSIBLE_ROOT/$name"
        else
            PACKAGE_ROOT="$DEVOPS_ANSIBLE_ROOT/services/$name"
        fi
        mkdir -p "$PACKAGE_ROOT"
        rm -rf "$PACKAGE_ROOT/$version"
        mkdir -p "$PACKAGE_ROOT/$version"
        # Will extract in $name/$version
        tar xzf $package -C "$PACKAGE_ROOT/$version"
    done

    # Prepare the link to latest services packages
    for package in $(ls "$DEVOPS_ANSIBLE_ROOT/services/"); do
        rm -f "$DEVOPS_ANSIBLE_ROOT/services/$package/latest"
        latest_version=$(ls "$DEVOPS_ANSIBLE_ROOT/services/$package/" | sort | tail -1)
        echo "Latest version for $package: $latest_version"
        ln -s "$latest_version" "$DEVOPS_ANSIBLE_ROOT/services/$package/latest"
    done
    # Prepare the link to latest services packages
    rm -f "$DEVOPS_ANSIBLE_ROOT/common/latest"
    latest_version=$(ls "$DEVOPS_ANSIBLE_ROOT/common/" | sort | tail -1)
    echo "Latest version for common: $latest_version"
    ln -s "$latest_version" "$DEVOPS_ANSIBLE_ROOT/common/latest"

    # Update all the PATH within the files
    # DEVOPS_PACKAGE
    # DEVOPS_BASE
    cd "$DEVOPS_ANSIBLE_ROOT/services/"
    for package in $(ls -d *); do
        cd $package
        for version in $(ls -d * | grep -v latest); do
            path_package=$(echo "$DEVOPS_ANSIBLE_ROOT/services/$package/$version" | sed -e 's/\//\\\//g')
            path_base=$(echo "$DEVOPS_ANSIBLE_ROOT" | sed -e 's/\//\\\//g')
            find $version -type f -print0 | xargs -0 sed -i \
                -e "s/DEVOPS_PACKAGE/$path_package/g"       \
                -e "s/DEVOPS_BASE/$path_base/g"
        done
        cd ..
    done
    # Update PATH within common
    cd "$DEVOPS_ANSIBLE_ROOT/common"
    for version in $(ls -d * | grep -v latest); do
        path_package=$(echo "$DEVOPS_ANSIBLE_ROOT/common/$version" | sed -e 's/\//\\\//g')
        path_base=$(echo "$DEVOPS_ANSIBLE_ROOT" | sed -e 's/\//\\\//g')
        find $version -type f -print0 | xargs -0 sed -i \
            -e "s/DEVOPS_PACKAGE/$path_package/g"       \
            -e "s/DEVOPS_BASE/$path_base/g"
    done
}

setup_api() {
    echo "Setting up api"
}

# Check arguments
# TODO - use getopt instead ...
if [ -z "$PACKAGE_FOLDER" ]; then
    echo "[ERROR] Missing package folder."
    usage
    exit 1
elif [ ! -d "$PACKAGE_FOLDER" ]; then
    echo "[ERROR] Package folder does not exist."
    usage
    exit 1
fi

if [ -z "$TARGET" ]; then
    echo "[ERROR] Missing target [ansible/api]"
    usage
    exit 1
elif [ "$TARGET" != "ansible" -a "$TARGET" != "api" ]; then
    echo "[ERROR] Wrong target [ansible/api]"
    usage
    exit 1
fi

# Load config file
[ -z "$CONFIG" ] && CONFIG="$DEFAULT_CONFIG"
if [ ! -r "$CONFIG" ]; then
    echo "[ERROR] Config file is missing: $CONFIG"
    exit 1
else
    source "$CONFIG"
fi

case "$TARGET" in
    "ansible")
        setup_ansible
        ;;
    "api")
        setup_api
        ;;
    "*")
        usage
        exit 1
        ;;
esac
